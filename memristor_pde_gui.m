% This script is written and read by pdetool and should NOT be edited.
% There are two recommended alternatives:
 % 1) Export the required variables from pdetool and create a MATLAB script
 %    to perform operations on these.
 % 2) Define the problem completely using a MATLAB script. See
 %    http://www.mathworks.com/help/pde/examples/index.html for examples
 %    of this approach.
function [frame] = pdemodel(ellipse_a,ellipse_b, state_boundary, plotflag_3D)

[pde_fig,ax]=pdeinit;
pdetool('appl_cb',1);
pdetool('snapon','on');
set(ax,'DataAspectRatio',[1 1 1]);
set(ax,'PlotBoxAspectRatio',[1.5 1 10000]);
set(ax,'XLim',[-7.5e-08 7.5e-08]);
set(ax,'YLim',[-5e-08 5e-08]);
set(ax,'XTick',[ -10e-08, -9e-08, -8e-08, -7e-08, -6e-08, -5e-08, -4e-08,...
 -3e-08, -2e-08, -1e-08, 0, 1e-08, 2e-08, 3e-08, 4e-08, 5e-08, 6e-08, ...
 7e-08, 8e-08, 9e-08, 10e-08]);
set(ax,'YTick',[ -10e-08, -9e-08, -8e-08, -7e-08, -6e-08, -5e-08, -4e-08,...
 -3e-08, -2e-08, -1e-08, 0, 1e-08, 2e-08, 3e-08, 4e-08, 5e-08, 6e-08, ...
 7e-08, 8e-08, 9e-08, 10e-08]);
pdetool('gridon','on');


% Geometry description:
A = 5e-8;
B = 8e-8;

T = A*B - pi/2*ellipse_a*ellipse_b;

pderect([-4e-08 4e-08 2.5e-08 -2.5e-08],'R1');
pdeellip(-4e-08,0,ellipse_a,ellipse_b,...
0,'E1');
set(findobj(get(pde_fig,'Children'),'Tag','PDEEval'),'String','R1-E1')

% Boundary conditions:
pdetool('changemode',0)
pdesetbd(7,...
'dir',...
1,...
'1',...
'0')
pdesetbd(6,...
'dir',...
1,...
'1',...
'0')
pdesetbd(5,...
'dir',...
1,...
'1',...
'0')
pdesetbd(4,...
'dir',...
1,...
'1',...
'0')
pdesetbd(3,...
'neu',...
1,...
'0',...
'0')
pdesetbd(2,...
'dir',...
1,...
'1',...
'0.3')
pdesetbd(1,...
'neu',...
1,...
'0',...
'0')

% Mesh generation:
setappdata(pde_fig,'Hgrad',1.3);
setappdata(pde_fig,'refinemethod','regular');
setappdata(pde_fig,'jiggle',char('on','mean',''));
setappdata(pde_fig,'MesherVersion','preR2013a');
pdetool('initmesh')
pdetool('refine')
pdetool('refine')

% PDE coefficients:
n = 1.2e27; %[m^-3]
q = n*T*1.6e-19;
q_str = num2str(q);
c_inv_sigmoid = join(['(1-1./(1+exp(18e7*(x-', num2str(state_boundary), '))))']);
c_str = strcat('8.85e-12*6*', c_inv_sigmoid);

pdeseteq(1,...
c_str,...
'0.0',...
q_str,...
'1.0',...
'0:10',...
'0.0',...
'0.0',...
'[0 100]')

%get lenght of char array and q and c
len = length('0.0                                        ');
q_len = length(q_str);
c_len = length(c_str);

% append spaces to match dimension
q_ = join([q_str repmat(' ', [1 len-q_len])]);

c_ = join([c_str repmat(' ', [1 len-c_len])]);

setappdata(pde_fig,'currparam',...
[c_;...
'0.0                                        ';...
q_;...
'1.0                                        '])

% Solve parameters:
setappdata(pde_fig,'solveparam',...
char('0','4488','10','pdeadworst',...
'0.5','longest','0','1E-4','','fixed','Inf'))

% Plotflags and user data strings:
setappdata(pde_fig,'plotflags',[4 ... color property (1-u; 2-abs(grad(u)); 3-abs(c*grad(u)); 4-user entry)
                                1 ... xystyle (1-interpolated shading; 2-flat shading)
                                3 ... height porperty
                                1 ... zsytle for height plot (1-continuous; 2-discontinuous)
                                2 ... arrows property
                                1 ... arrows plot style (1-proportional; 2-normalized)
                                7 ... colormap
                                1 ... solution autoplot
                                0 ... plot in xy-grid
                                0 ... showmesh
                                0 1 1 ... color
                                1 ... contour
                                plotflag_3D ... 3D plot
                                1 ... arrows
                                0 ... deformed_mesh
                                2 ... deformed mesh property
                                ]);
setappdata(pde_fig,'colstring',strcat('8.85e-12*6*', c_inv_sigmoid));
setappdata(pde_fig,'arrowstring','[ux;uy]');
setappdata(pde_fig,'deformstring','');
setappdata(pde_fig,'heightstring','');


% Solve PDE:
pdetool('solve')

% Set frame
frame = getframe(ax);